package com.ifrr.ticketing.swing;

import com.ifrr.ticketing.entities.Incidencia;
import com.ifrr.ticketing.service.ServiceIncidencia;
import com.ifrr.ticketing.service.ServiceUsuario;
import java.io.File;
import java.net.URL;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author tarde
 */
public class TecnicoForm extends javax.swing.JFrame {

    /**
     * Creates new form Tecnico
     */
    private final ServiceIncidencia si;
    private final Integer usuarioId;

    private void updateTable(String filtro) {
        try {
            DefaultTableModel dtm = new DefaultTableModel(new Object[][]{}, new String[]{"ID", "Estado", "Desc."});
            Object[] arr;
            List<Incidencia> incidencias = si.getAllIncidencias();

            LocalDate a, b, c;
            for (Incidencia incidencia : incidencias) {
                if (incidencia.getTecnico().getId().equals(usuarioId)) {
                    if (filtro.equals("asignadas") && !incidencia.getEstado().contains("espera")) {
                        arr = new Object[]{incidencia.getId(), incidencia.getEstado(), incidencia.getDescIncidencia()};
                        dtm.addRow(arr);
                    } else if (filtro.equals("cerradas") && incidencia.getEstado().contains("cerrada") && !incidencia.getfCierre().isBlank()) {
                        if (jFormattedTextField1.getText().matches("\\d{4}-(1[0-2]|[1-9])-(3[01]|[12][0-9]|[1-9])$") && jFormattedTextField2.getText().matches("\\d{4}-(1[0-2]|[1-9])-(3[01]|[12][0-9]|[1-9])$")) {
                            a = LocalDate.parse(jFormattedTextField1.getText(), formatter);
                            b = LocalDate.parse(jFormattedTextField2.getText(), formatter);
                            c = LocalDate.parse(incidencia.getfCierre(), formatter);
                            if (c.isAfter(a) && c.isBefore(b)) {
                                arr = new Object[]{incidencia.getId(), incidencia.getEstado(), incidencia.getDescIncidencia()};
                                dtm.addRow(arr);
                            }
                        }
                    } else if (!incidencia.getEstado().contains("espera") && filtro.equals("tipo") && Objects.equals(incidencia.getTipo(), (String) tipoComboBox.getSelectedItem())) {
                        arr = new Object[]{incidencia.getId(), incidencia.getEstado(), incidencia.getDescIncidencia()};
                        dtm.addRow(arr);
                    }
                }
            }
            tablita.setModel(dtm);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Ha habido un error actualizando la tabla: \n" + Arrays.toString(e.getStackTrace()),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
            e.printStackTrace();
        }
    }

    public TecnicoForm(ServiceIncidencia si, Integer usuarioId) {
        this.si = si;
        this.usuarioId = usuarioId;
        initComponents();
        loadComboBoxData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        botonResolver = new javax.swing.JButton();
        botonCerrarSinExito = new javax.swing.JButton();
        botonListarPorTipo = new javax.swing.JButton();
        botonListarCerradas = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablita = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        botonListarAsignadas = new javax.swing.JButton();
        botonDetalles = new javax.swing.JButton();
        botonCerrarConExito = new javax.swing.JButton();
        tipoComboBox = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAyuda = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("¡Bienvenido técnico!");
        jLabel2.setMaximumSize(new java.awt.Dimension(200, 200));
        jLabel2.setMinimumSize(new java.awt.Dimension(200, 200));
        jLabel2.setPreferredSize(new java.awt.Dimension(200, 200));

        botonResolver.setBackground(new java.awt.Color(153, 204, 255));
        botonResolver.setText("Resolver incidencia");
        botonResolver.setPreferredSize(new java.awt.Dimension(141, 62));
        botonResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonResolverActionPerformed(evt);
            }
        });

        botonCerrarSinExito.setBackground(new java.awt.Color(153, 204, 255));
        botonCerrarSinExito.setText("Cerrar incidencia sin éxito");
        botonCerrarSinExito.setMaximumSize(new java.awt.Dimension(141, 23));
        botonCerrarSinExito.setMinimumSize(new java.awt.Dimension(141, 23));
        botonCerrarSinExito.setPreferredSize(new java.awt.Dimension(141, 62));
        botonCerrarSinExito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarSinExitoActionPerformed(evt);
            }
        });

        botonListarPorTipo.setBackground(new java.awt.Color(153, 204, 255));
        botonListarPorTipo.setText("Listar");
        botonListarPorTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListarPorTipoActionPerformed(evt);
            }
        });

        botonListarCerradas.setBackground(new java.awt.Color(153, 204, 255));
        botonListarCerradas.setText("Listar");
        botonListarCerradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListarCerradasActionPerformed(evt);
            }
        });

        tablita.setBackground(new java.awt.Color(153, 204, 255));
        tablita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Estado", "Desc."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablitaMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablita);
        updateTable(strFilter);

        jLabel1.setForeground(new java.awt.Color(242, 242, 242));
        jLabel1.setText("Listar incidencias cerradas en un periodo:");

        jLabel3.setForeground(new java.awt.Color(242, 242, 242));
        jLabel3.setText("Listar por tipo de incidencia:");

        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-M-d"))));
        jFormattedTextField1.setText(LocalDate.now().format(formatter));
        jFormattedTextField1.setPreferredSize(new java.awt.Dimension(125, 35));

        jFormattedTextField2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-M-d"))));
        jFormattedTextField2.setText(LocalDate.now().format(formatter));
        jFormattedTextField2.setPreferredSize(new java.awt.Dimension(125, 35));

        botonListarAsignadas.setBackground(new java.awt.Color(153, 204, 255));
        botonListarAsignadas.setText("Listar Incidencias Asignadas");
        botonListarAsignadas.setPreferredSize(new java.awt.Dimension(196, 62));
        botonListarAsignadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListarAsignadasActionPerformed(evt);
            }
        });

        botonDetalles.setBackground(new java.awt.Color(153, 204, 255));
        botonDetalles.setText("Detalles Incidencia");
        botonDetalles.setMaximumSize(new java.awt.Dimension(141, 23));
        botonDetalles.setMinimumSize(new java.awt.Dimension(141, 23));
        botonDetalles.setPreferredSize(new java.awt.Dimension(141, 62));
        botonDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDetallesActionPerformed(evt);
            }
        });

        botonCerrarConExito.setBackground(new java.awt.Color(153, 204, 255));
        botonCerrarConExito.setText("Cerrar incidencia con éxito");
        botonCerrarConExito.setMaximumSize(new java.awt.Dimension(141, 23));
        botonCerrarConExito.setMinimumSize(new java.awt.Dimension(141, 23));
        botonCerrarConExito.setPreferredSize(new java.awt.Dimension(141, 62));
        botonCerrarConExito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarConExitoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(botonResolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonCerrarSinExito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonListarAsignadas, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                        .addComponent(botonCerrarConExito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(botonDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(botonListarCerradas, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(60, 60, 60)
                                    .addComponent(botonListarPorTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tipoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(57, 57, 57))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(457, 457, 457)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(botonListarCerradas, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tipoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(botonListarPorTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(botonResolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonCerrarSinExito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonCerrarConExito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonListarAsignadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        menuAyuda.setText("Ayuda");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info.png"))); // NOI18N
        jMenuItem1.setText("Ayuda");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuAyuda.add(jMenuItem1);

        jMenuBar1.add(menuAyuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadComboBoxData() {
        HashSet<String> tipos = new HashSet<>();
        for (Incidencia in : si.getAllIncidencias()) {
            tipos.add(in.getTipo());
        }
        for (String tipo : tipos) {
            tipoComboBox.addItem(tipo);
        }
    }

    private void botonDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDetallesActionPerformed
        if (idSeleccionada != null) {
            Incidencia seleccionada = si.getIncidenciaById(idSeleccionada);
            String dispositivo = "";
            String espacio = "";
            String tecnico = "";
            String gestor = "";
            String usuario = "";
            if (seleccionada.getDispositivo() != null) {
                dispositivo = seleccionada.getDispositivo().getMarca() + " " + seleccionada.getDispositivo().getModelo();
            }
            if (seleccionada.getEspacio() != null) {
                espacio = seleccionada.getEspacio().getDescripcion();
            }
            if (seleccionada.getTecnico() != null) {
                tecnico = seleccionada.getTecnico().getNombreApellidos();
            }
            if (seleccionada.getGestor() != null) {
                gestor = seleccionada.getGestor().getNombreApellidos();
            }
            if (seleccionada.getUsuario() != null) {
                usuario = seleccionada.getUsuario().getNombreApellidos();
            }
            JOptionPane.showMessageDialog(
                    null,
                    "ID: " + seleccionada.getId()
                    + "\nEstado: " + seleccionada.getEstado()
                    + "\nTipo: " + seleccionada.getTipo()
                    + "\nDescripción Incidencia: " + seleccionada.getDescIncidencia()
                    + "\nFecha de Entrada: " + seleccionada.getfEntrada()
                    + "\nFecha de Cierre: " + seleccionada.getfCierre()
                    + "\nDescripción Solución: " + seleccionada.getDescSolucion()
                    + "\nDispositivo: " + dispositivo
                    + "\nEspacio: " + espacio
                    + "\nTécnico: " + tecnico
                    + "\nGestor: " + gestor
                    + "\nUsuario: " + usuario,
                    "Detalles de incidencia",
                    JOptionPane.INFORMATION_MESSAGE
            );
            updateTable(strFilter);
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona una incidencia antes de pulsar el botón",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_botonDetallesActionPerformed

    private void tablitaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablitaMousePressed
        JTable source = (JTable) evt.getSource();
        int fila = source.rowAtPoint(evt.getPoint());
        idSeleccionada = (Integer) source.getModel().getValueAt(fila, 0);
    }//GEN-LAST:event_tablitaMousePressed

    private void botonListarAsignadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListarAsignadasActionPerformed
        strFilter = "asignadas";
        updateTable(strFilter);
    }//GEN-LAST:event_botonListarAsignadasActionPerformed

    private void botonListarCerradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListarCerradasActionPerformed
        if (!jFormattedTextField1.getText().isBlank() && !jFormattedTextField2.getText().isBlank()) {
            strFilter = "cerradas";
            updateTable(strFilter);
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca las fechas entre las que cerraron las incidencias",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_botonListarCerradasActionPerformed

    private void botonListarPorTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListarPorTipoActionPerformed
        if ((String) tipoComboBox.getSelectedItem() != null) {
            strFilter = "tipo";
            updateTable(strFilter);
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca un tipo",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_botonListarPorTipoActionPerformed

    private void botonCerrarSinExitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarSinExitoActionPerformed
        cerrar(false);
    }//GEN-LAST:event_botonCerrarSinExitoActionPerformed

    private void botonCerrarConExitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarConExitoActionPerformed
        cerrar(true);
    }//GEN-LAST:event_botonCerrarConExitoActionPerformed

    private void botonResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonResolverActionPerformed
        if (idSeleccionada != null) {
            new ResolverIncidencia(this, true, si, idSeleccionada).setVisible(true);
            updateTable(strFilter);
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona una incidencia antes de pulsar el botón",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_botonResolverActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            File f = new File("help" + File.separator + "help_set.hs");
            URL hsURL = f.toURI().toURL();
            HelpSet hs = new HelpSet(getClass().getClassLoader(), hsURL);
            HelpBroker hb = hs.createHelpBroker();
            hb.enableHelpOnButton(jMenuItem1, "main", hs);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void cerrar(boolean exito) {
        if (idSeleccionada != null) {
            Incidencia seleccionada = si.getIncidenciaById(idSeleccionada);
            if (!seleccionada.getDescSolucion().isBlank() && !seleccionada.getTipo().isBlank()) {
                if (exito) {
                    seleccionada.setEstado("cerrado con éxito");
                } else {
                    seleccionada.setEstado("cerrado sin éxito");
                }
                si.updateIncidencia(seleccionada);
            }
            updateTable(strFilter);
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona una incidencia antes de pulsar el botón",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-M-d");
    String strFilter = "asignadas";
    Integer idSeleccionada;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCerrarConExito;
    private javax.swing.JButton botonCerrarSinExito;
    private javax.swing.JButton botonDetalles;
    private javax.swing.JButton botonListarAsignadas;
    private javax.swing.JButton botonListarCerradas;
    private javax.swing.JButton botonListarPorTipo;
    private javax.swing.JButton botonResolver;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JTable tablita;
    private javax.swing.JComboBox<String> tipoComboBox;
    // End of variables declaration//GEN-END:variables
}
