package com.ifrr.ticketing.swing;

import com.ifrr.ticketing.entities.Dispositivo;
import com.ifrr.ticketing.entities.Espacio;
import com.ifrr.ticketing.entities.Incidencia;
import com.ifrr.ticketing.entities.Perfil;
import com.ifrr.ticketing.entities.Usuario;
import com.ifrr.ticketing.service.ServiceDispositivo;
import com.ifrr.ticketing.service.ServiceIncidencia;
import com.ifrr.ticketing.service.ServiceUsuario;
import com.ifrr.ticketing.service.ServiceEspacio;
import java.awt.Component;
import java.awt.Font;
import java.io.File;
import java.net.URL;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author tarde
 */
public class AdministradorForm extends javax.swing.JFrame {

    /**
     * Creates new form Administrador
     */
    private final ServiceUsuario su;
    private final ServiceIncidencia si;
    private final ServiceDispositivo sd;
    private final ServiceEspacio se;
    private HelpBroker hb;

    public AdministradorForm(ServiceUsuario su, ServiceIncidencia si, ServiceDispositivo sd, ServiceEspacio se) {
        this.su = su;
        this.si = si;
        this.sd = sd;
        this.se = se;
        initComponents();
        loadComboBoxData();
        initHelp();
    }

    private void initHelp() {
        try {
            URL hsURL = getClass().getResource("/help/help_set.hs");
            if (hsURL == null) {
                System.out.println("El archivo help_set.hs no se pudo encontrar.");
                return;
            }
            HelpSet hs = new HelpSet(getClass().getClassLoader(), hsURL);
            hb = hs.createHelpBroker();
            hb.enableHelpOnButton(jMenuItem1, "main", hs);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        panelGestor = new javax.swing.JPanel();
        tipoComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        asignarTecnico = new javax.swing.JButton();
        jScrollPaneTablaGestor = new javax.swing.JScrollPane();
        tablitaGestor = new javax.swing.JTable();
        listarEnEspera = new javax.swing.JButton();
        listarPorTipo = new javax.swing.JButton();
        listarPorTecnico = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        darDeAlta = new javax.swing.JButton();
        detallesIncidencia = new javax.swing.JButton();
        asignarGestor = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        gestorComboBox = new javax.swing.JComboBox<>();
        tecnicoComboBox = new javax.swing.JComboBox<>();
        listTecnicoComboBox = new javax.swing.JComboBox<>();
        gestorIncidenciasTodas = new javax.swing.JButton();
        panelIncidencias = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablitaIncidencias = new javax.swing.JTable();
        incidenciasPorTipo = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        incidenciasPorUsuario = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        incidenciasPorTecnico = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        incidenciasPorGestor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        incidenciasPorFecha = new javax.swing.JButton();
        incidenciasTodas = new javax.swing.JButton();
        detallesIncidencias = new javax.swing.JButton();
        incidenciasGestorComboBox = new javax.swing.JComboBox<>();
        incidenciasTecnicoComboBox = new javax.swing.JComboBox<>();
        incidenciasUsuarioComboBox = new javax.swing.JComboBox<>();
        incidenciasTipoComboBox = new javax.swing.JComboBox<>();
        borrarIncidencia = new javax.swing.JButton();
        crearIncidencia = new javax.swing.JButton();
        panelUsuarios = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablitaUsuarios = new javax.swing.JTable();
        usuariosTodos = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        usuariosDetalles = new javax.swing.JButton();
        usuariosPorPerfil = new javax.swing.JButton();
        crearUsuario = new javax.swing.JButton();
        borrarUsuario = new javax.swing.JButton();
        perfilComboBox = new javax.swing.JComboBox<>();
        panelDispositivos = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablitaDispositivos = new javax.swing.JTable();
        dispositivosTodos = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        dispositivosDetalles = new javax.swing.JButton();
        crearDispositivo = new javax.swing.JButton();
        borrarDispositivo = new javax.swing.JButton();
        panelEspacios = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tablitaEspacios = new javax.swing.JTable();
        espaciosTodos = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        espaciosDetalles = new javax.swing.JButton();
        crearEspacio = new javax.swing.JButton();
        borrarEspacio = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAyuda = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setSize(new java.awt.Dimension(1120, 650));

        jTabbedPane.setMinimumSize(new java.awt.Dimension(1000, 650));
        jTabbedPane.setPreferredSize(new java.awt.Dimension(1100, 650));

        panelGestor.setBackground(new java.awt.Color(102, 102, 255));
        panelGestor.setPreferredSize(new java.awt.Dimension(1100, 615));

        tipoComboBox.setPreferredSize(new java.awt.Dimension(72, 230));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Panel de Gestor");
        jLabel2.setMaximumSize(new java.awt.Dimension(200, 200));
        jLabel2.setMinimumSize(new java.awt.Dimension(200, 200));
        jLabel2.setPreferredSize(new java.awt.Dimension(200, 200));

        asignarTecnico.setBackground(new java.awt.Color(153, 204, 255));
        asignarTecnico.setText("Asignar t√©cnico");
        asignarTecnico.setMaximumSize(new java.awt.Dimension(163, 62));
        asignarTecnico.setMinimumSize(new java.awt.Dimension(163, 62));
        asignarTecnico.setPreferredSize(new java.awt.Dimension(163, 62));
        asignarTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignarTecnicoActionPerformed(evt);
            }
        });

        tablitaGestor.setBackground(new java.awt.Color(153, 204, 255));
        tablitaGestor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Estado", "Desc."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablitaGestor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablitaGestorMousePressed(evt);
            }
        });
        jScrollPaneTablaGestor.setViewportView(tablitaGestor);
        updateTable(strFilterGestor, "gestor");

        listarEnEspera.setBackground(new java.awt.Color(153, 204, 255));
        listarEnEspera.setText("Incidencias en espera");
        listarEnEspera.setMaximumSize(new java.awt.Dimension(219, 54));
        listarEnEspera.setMinimumSize(new java.awt.Dimension(219, 54));
        listarEnEspera.setPreferredSize(new java.awt.Dimension(150, 54));
        listarEnEspera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarEnEsperaActionPerformed(evt);
            }
        });

        listarPorTipo.setBackground(new java.awt.Color(153, 204, 255));
        listarPorTipo.setText("Incidencias por tipo");
        listarPorTipo.setMaximumSize(new java.awt.Dimension(219, 54));
        listarPorTipo.setMinimumSize(new java.awt.Dimension(219, 54));
        listarPorTipo.setPreferredSize(new java.awt.Dimension(150, 54));
        listarPorTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarPorTipoActionPerformed(evt);
            }
        });

        listarPorTecnico.setBackground(new java.awt.Color(153, 204, 255));
        listarPorTecnico.setText("Incidencias por t√©cnico");
        listarPorTecnico.setMaximumSize(new java.awt.Dimension(219, 54));
        listarPorTecnico.setMinimumSize(new java.awt.Dimension(219, 54));
        listarPorTecnico.setPreferredSize(new java.awt.Dimension(150, 54));
        listarPorTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarPorTecnicoActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tipo:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("T√©cnico:");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("T√©cnico:");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Listar");

        darDeAlta.setBackground(new java.awt.Color(153, 204, 255));
        darDeAlta.setText("Dar de alta");
        darDeAlta.setMaximumSize(new java.awt.Dimension(163, 62));
        darDeAlta.setMinimumSize(new java.awt.Dimension(163, 62));
        darDeAlta.setPreferredSize(new java.awt.Dimension(163, 62));
        darDeAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darDeAltaActionPerformed(evt);
            }
        });

        detallesIncidencia.setBackground(new java.awt.Color(153, 204, 255));
        detallesIncidencia.setText("Detalles de incidencia");
        detallesIncidencia.setMaximumSize(new java.awt.Dimension(163, 62));
        detallesIncidencia.setMinimumSize(new java.awt.Dimension(163, 62));
        detallesIncidencia.setPreferredSize(new java.awt.Dimension(163, 62));
        detallesIncidencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detallesIncidenciaActionPerformed(evt);
            }
        });

        asignarGestor.setBackground(new java.awt.Color(153, 204, 255));
        asignarGestor.setText("Asignar gestor");
        asignarGestor.setMaximumSize(new java.awt.Dimension(163, 62));
        asignarGestor.setMinimumSize(new java.awt.Dimension(163, 62));
        asignarGestor.setPreferredSize(new java.awt.Dimension(163, 62));
        asignarGestor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignarGestorActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Gestor:");

        gestorIncidenciasTodas.setBackground(new java.awt.Color(153, 204, 255));
        gestorIncidenciasTodas.setText("Listar todas las incidencias");
        gestorIncidenciasTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gestorIncidenciasTodasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelGestorLayout = new javax.swing.GroupLayout(panelGestor);
        panelGestor.setLayout(panelGestorLayout);
        panelGestorLayout.setHorizontalGroup(
            panelGestorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGestorLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(panelGestorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(asignarTecnico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(detallesIncidencia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(asignarGestor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(darDeAlta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(gestorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tecnicoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelGestorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelGestorLayout.createSequentialGroup()
                        .addComponent(jScrollPaneTablaGestor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelGestorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelGestorLayout.createSequentialGroup()
                                .addGroup(panelGestorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelGestorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(listarEnEspera, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(listarPorTipo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(listarPorTecnico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tipoComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(listTecnicoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(gestorIncidenciasTodas, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 161, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(panelGestorLayout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        panelGestorLayout.setVerticalGroup(
            panelGestorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGestorLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelGestorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGestorLayout.createSequentialGroup()
                        .addComponent(gestorIncidenciasTodas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listarEnEspera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tipoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(listarPorTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listTecnicoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listarPorTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGestorLayout.createSequentialGroup()
                        .addComponent(darDeAlta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(7, 7, 7)
                        .addComponent(gestorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(asignarGestor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tecnicoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(asignarTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(detallesIncidencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPaneTablaGestor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Panel Gestor", panelGestor);

        panelIncidencias.setBackground(new java.awt.Color(102, 102, 255));
        panelIncidencias.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablitaIncidencias.setBackground(new java.awt.Color(153, 204, 255));
        tablitaIncidencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Tipos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablitaIncidencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablitaIncidenciasMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(tablitaIncidencias);
        if (tablitaIncidencias.getColumnModel().getColumnCount() > 0) {
            tablitaIncidencias.getColumnModel().getColumn(0).setPreferredWidth(10);
        }
        updateTable(strFilterIncidencias, "incidencias");

        panelIncidencias.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, 540));

        incidenciasPorTipo.setBackground(new java.awt.Color(153, 204, 255));
        incidenciasPorTipo.setText("Listar por tipo");
        incidenciasPorTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incidenciasPorTipoActionPerformed(evt);
            }
        });
        panelIncidencias.add(incidenciasPorTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 176, 62));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Tipo:");
        panelIncidencias.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Listado de Incidencias");
        panelIncidencias.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 174, 47));

        incidenciasPorUsuario.setBackground(new java.awt.Color(153, 204, 255));
        incidenciasPorUsuario.setText("Listar por Id de Usuario");
        incidenciasPorUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incidenciasPorUsuarioActionPerformed(evt);
            }
        });
        panelIncidencias.add(incidenciasPorUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 176, 62));

        jLabel21.setBackground(new java.awt.Color(255, 255, 255));
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Usuario:");
        panelIncidencias.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        incidenciasPorTecnico.setBackground(new java.awt.Color(153, 204, 255));
        incidenciasPorTecnico.setText("Listar por Id de T√©cnico");
        incidenciasPorTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incidenciasPorTecnicoActionPerformed(evt);
            }
        });
        panelIncidencias.add(incidenciasPorTecnico, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 176, 62));

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("T√©cnico:");
        panelIncidencias.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, -1, -1));

        jLabel23.setBackground(new java.awt.Color(255, 255, 255));
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Gestor:");
        panelIncidencias.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, -1, -1));

        incidenciasPorGestor.setBackground(new java.awt.Color(153, 204, 255));
        incidenciasPorGestor.setText("Listar por Id de Gestor");
        incidenciasPorGestor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incidenciasPorGestorActionPerformed(evt);
            }
        });
        panelIncidencias.add(incidenciasPorGestor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 540, 176, 62));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Listar incidencias en un periodo:");
        panelIncidencias.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, -1, -1));

        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-M-d"))));
        jFormattedTextField1.setText(LocalDate.now().format(formatter));
        jFormattedTextField1.setPreferredSize(new java.awt.Dimension(125, 35));
        panelIncidencias.add(jFormattedTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 70, -1, -1));

        jFormattedTextField2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-M-d"))));
        jFormattedTextField2.setText(LocalDate.now().format(formatter));
        jFormattedTextField2.setPreferredSize(new java.awt.Dimension(125, 35));
        panelIncidencias.add(jFormattedTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 70, -1, -1));

        incidenciasPorFecha.setBackground(new java.awt.Color(153, 204, 255));
        incidenciasPorFecha.setText("Listar por fecha");
        incidenciasPorFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incidenciasPorFechaActionPerformed(evt);
            }
        });
        panelIncidencias.add(incidenciasPorFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 120, 270, 60));

        incidenciasTodas.setBackground(new java.awt.Color(153, 204, 255));
        incidenciasTodas.setText("Listar todas las incidencias");
        incidenciasTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incidenciasTodasActionPerformed(evt);
            }
        });
        panelIncidencias.add(incidenciasTodas, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 280, 270, 60));

        detallesIncidencias.setBackground(new java.awt.Color(153, 204, 255));
        detallesIncidencias.setText("Detalles de incidencia");
        detallesIncidencias.setMaximumSize(new java.awt.Dimension(163, 62));
        detallesIncidencias.setMinimumSize(new java.awt.Dimension(163, 62));
        detallesIncidencias.setPreferredSize(new java.awt.Dimension(163, 62));
        detallesIncidencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detallesIncidenciasActionPerformed(evt);
            }
        });
        panelIncidencias.add(detallesIncidencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 200, 270, -1));

        panelIncidencias.add(incidenciasGestorComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 170, -1));

        panelIncidencias.add(incidenciasTecnicoComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 170, -1));

        panelIncidencias.add(incidenciasUsuarioComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 170, -1));

        panelIncidencias.add(incidenciasTipoComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 170, -1));

        borrarIncidencia.setBackground(new java.awt.Color(153, 204, 255));
        borrarIncidencia.setText("Borrar incidencia");
        borrarIncidencia.setMaximumSize(new java.awt.Dimension(163, 62));
        borrarIncidencia.setMinimumSize(new java.awt.Dimension(163, 62));
        borrarIncidencia.setPreferredSize(new java.awt.Dimension(163, 62));
        borrarIncidencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarIncidenciaActionPerformed(evt);
            }
        });
        panelIncidencias.add(borrarIncidencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 360, 270, -1));

        crearIncidencia.setBackground(new java.awt.Color(153, 204, 255));
        crearIncidencia.setText("Crear incidencia");
        crearIncidencia.setMaximumSize(new java.awt.Dimension(163, 62));
        crearIncidencia.setMinimumSize(new java.awt.Dimension(163, 62));
        crearIncidencia.setPreferredSize(new java.awt.Dimension(163, 62));
        crearIncidencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearIncidenciaActionPerformed(evt);
            }
        });
        panelIncidencias.add(crearIncidencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 440, 270, -1));

        jTabbedPane.addTab("Incidencias", panelIncidencias);

        panelUsuarios.setBackground(new java.awt.Color(102, 102, 255));
        panelUsuarios.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablitaUsuarios.setBackground(new java.awt.Color(153, 204, 255));
        tablitaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre y Apellidos", "Correo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablitaUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablitaUsuariosMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(tablitaUsuarios);
        if (tablitaUsuarios.getColumnModel().getColumnCount() > 0) {
            tablitaUsuarios.getColumnModel().getColumn(0).setPreferredWidth(10);
            tablitaUsuarios.getColumnModel().getColumn(2).setHeaderValue("Marca");
        }
        updateTable(strFilterUsuarios, "usuario");

        panelUsuarios.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, -1));

        usuariosTodos.setBackground(new java.awt.Color(153, 204, 255));
        usuariosTodos.setText("Listar todos");
        usuariosTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuariosTodosActionPerformed(evt);
            }
        });
        panelUsuarios.add(usuariosTodos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 176, 62));

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Perfil:");
        panelUsuarios.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Listado de Usuarios");
        panelUsuarios.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 174, 47));

        usuariosDetalles.setBackground(new java.awt.Color(153, 204, 255));
        usuariosDetalles.setText("Detalles de usuario");
        usuariosDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuariosDetallesActionPerformed(evt);
            }
        });
        panelUsuarios.add(usuariosDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 176, 62));

        usuariosPorPerfil.setBackground(new java.awt.Color(153, 204, 255));
        usuariosPorPerfil.setText("Listar por perfil");
        usuariosPorPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuariosPorPerfilActionPerformed(evt);
            }
        });
        panelUsuarios.add(usuariosPorPerfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 176, 62));

        crearUsuario.setBackground(new java.awt.Color(153, 204, 255));
        crearUsuario.setText("Crear usuario");
        crearUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(crearUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 176, 62));

        borrarUsuario.setBackground(new java.awt.Color(153, 204, 255));
        borrarUsuario.setText("Borrar usuario");
        borrarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarUsuarioActionPerformed(evt);
            }
        });
        panelUsuarios.add(borrarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 176, 62));

        perfilComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Usuario", "T√©cnico", "Gestor", "Administrador" }));
        panelUsuarios.add(perfilComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 170, -1));

        jTabbedPane.addTab("Usuarios", panelUsuarios);

        panelDispositivos.setBackground(new java.awt.Color(102, 102, 255));
        panelDispositivos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablitaDispositivos.setBackground(new java.awt.Color(153, 204, 255));
        tablitaDispositivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tipo", "Modelo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablitaDispositivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablitaDispositivosMousePressed(evt);
            }
        });
        jScrollPane8.setViewportView(tablitaDispositivos);
        if (tablitaDispositivos.getColumnModel().getColumnCount() > 0) {
            tablitaDispositivos.getColumnModel().getColumn(0).setPreferredWidth(10);
            tablitaDispositivos.getColumnModel().getColumn(2).setHeaderValue("Modelo");
        }
        updateTable("todos", "dispositivo");

        panelDispositivos.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, -1));

        dispositivosTodos.setBackground(new java.awt.Color(153, 204, 255));
        dispositivosTodos.setText("Listar todos");
        dispositivosTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispositivosTodosActionPerformed(evt);
            }
        });
        panelDispositivos.add(dispositivosTodos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 176, 62));

        jLabel25.setBackground(new java.awt.Color(255, 255, 255));
        jLabel25.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Listado de Dispositivos");
        panelDispositivos.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 174, 47));

        dispositivosDetalles.setBackground(new java.awt.Color(153, 204, 255));
        dispositivosDetalles.setText("Detalles de dispositivo");
        dispositivosDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispositivosDetallesActionPerformed(evt);
            }
        });
        panelDispositivos.add(dispositivosDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 176, 62));

        crearDispositivo.setBackground(new java.awt.Color(153, 204, 255));
        crearDispositivo.setText("Crear dispositivo");
        crearDispositivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearDispositivoActionPerformed(evt);
            }
        });
        panelDispositivos.add(crearDispositivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 176, 62));

        borrarDispositivo.setBackground(new java.awt.Color(153, 204, 255));
        borrarDispositivo.setText("Borrar dispositivo");
        borrarDispositivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarDispositivoActionPerformed(evt);
            }
        });
        panelDispositivos.add(borrarDispositivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 176, 62));

        jTabbedPane.addTab("Dispositivos", panelDispositivos);

        panelEspacios.setBackground(new java.awt.Color(102, 102, 255));
        panelEspacios.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablitaEspacios.setBackground(new java.awt.Color(153, 204, 255));
        tablitaEspacios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Descripci√≥n"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablitaEspacios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablitaEspaciosMousePressed(evt);
            }
        });
        jScrollPane9.setViewportView(tablitaEspacios);
        if (tablitaEspacios.getColumnModel().getColumnCount() > 0) {
            tablitaEspacios.getColumnModel().getColumn(0).setPreferredWidth(10);
        }
        updateTable("todos", "espacio");

        panelEspacios.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, -1));

        espaciosTodos.setBackground(new java.awt.Color(153, 204, 255));
        espaciosTodos.setText("Listar todos");
        espaciosTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espaciosTodosActionPerformed(evt);
            }
        });
        panelEspacios.add(espaciosTodos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 176, 62));

        jLabel26.setBackground(new java.awt.Color(255, 255, 255));
        jLabel26.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Listado de Espacios");
        panelEspacios.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 174, 47));

        espaciosDetalles.setBackground(new java.awt.Color(153, 204, 255));
        espaciosDetalles.setText("Detalles de espacio");
        espaciosDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espaciosDetallesActionPerformed(evt);
            }
        });
        panelEspacios.add(espaciosDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 176, 62));

        crearEspacio.setBackground(new java.awt.Color(153, 204, 255));
        crearEspacio.setText("Crear espacio");
        crearEspacio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearEspacioActionPerformed(evt);
            }
        });
        panelEspacios.add(crearEspacio, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 176, 62));

        borrarEspacio.setBackground(new java.awt.Color(153, 204, 255));
        borrarEspacio.setText("Borrar espacio");
        borrarEspacio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarEspacioActionPerformed(evt);
            }
        });
        panelEspacios.add(borrarEspacio, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 176, 62));

        jTabbedPane.addTab("Espacios", panelEspacios);

        menuAyuda.setText("Ayuda");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info.png"))); // NOI18N
        jMenuItem1.setText("Ayuda");
        menuAyuda.add(jMenuItem1);

        jMenuBar1.add(menuAyuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void asignarTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignarTecnicoActionPerformed
        asignar(true);
    }//GEN-LAST:event_asignarTecnicoActionPerformed

    public void asignar(boolean tecnico) {
        if (idSeleccionada != null) {
            Incidencia seleccionada = si.getIncidenciaById(idSeleccionada);
            if (seleccionada != null) {
                String selectedGestor = (String) gestorComboBox.getSelectedItem();
                String selectedTecnico = (String) tecnicoComboBox.getSelectedItem();
                if (!tecnico && selectedGestor != null) {
                    int gestorId = Integer.parseInt(selectedGestor.split(";")[0]);
                    seleccionada.setGestor(su.getUsuarioById(gestorId));
                    si.updateIncidencia(seleccionada);
                }
                if (tecnico && selectedTecnico != null) {
                    int tecnicoId = Integer.parseInt(selectedTecnico.split(";")[0]);
                    seleccionada.setTecnico(su.getUsuarioById(tecnicoId));
                    si.updateIncidencia(seleccionada);
                }
            }
            updateTable(strFilterGestor, "gestor");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona una incidencia antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void loadComboBoxData() {
        List<Usuario> usuarios = su.getAllUsuarios();
        for (Usuario u : usuarios) {
            Set<Perfil> perfiles = u.getPerfiles();
            boolean esTecnico = false;
            boolean esGestor = false;
            boolean esUsuario = false;

            for (Perfil p : perfiles) {
                if (p.getId() == 1) {
                    esUsuario = true;
                }
                if (p.getId() == 2) {
                    esTecnico = true;
                }
                if (p.getId() == 3) {
                    esGestor = true;
                }
            }

            String item = u.getId() + ";" + u.getNombreApellidos() + ";" + u.getCorreo();

            if (esTecnico) {
                tecnicoComboBox.addItem(item);
                listTecnicoComboBox.addItem(item);
                incidenciasTecnicoComboBox.addItem(item);
            }
            if (esGestor) {
                gestorComboBox.addItem(item);
                incidenciasGestorComboBox.addItem(item);
            }
            if (esUsuario) {
                incidenciasUsuarioComboBox.addItem(item);
            }
        }
        HashSet<String> tipos = new HashSet<>();
        for (Incidencia in : si.getAllIncidencias()) {
            tipos.add(in.getTipo());
        }
        for (String tipo : tipos) {
            tipoComboBox.addItem(tipo);
            incidenciasTipoComboBox.addItem(tipo);
        }
    }

    private void listarEnEsperaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarEnEsperaActionPerformed
        strFilterGestor = "espera";
        updateTable(strFilterGestor, "gestor");
    }//GEN-LAST:event_listarEnEsperaActionPerformed

    private void listarPorTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarPorTipoActionPerformed
        if ((String) tipoComboBox.getSelectedItem() != null) {
            strFilterGestor = "tipo";
            updateTable(strFilterGestor, "gestor");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca un tipo",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_listarPorTipoActionPerformed

    private void listarPorTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarPorTecnicoActionPerformed
        if ((String) listTecnicoComboBox.getSelectedItem() != null) {
            strFilterGestor = "tecnico";
            updateTable(strFilterGestor, "gestor");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca un id v√°lido",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_listarPorTecnicoActionPerformed

    private void darDeAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darDeAltaActionPerformed
        if (idSeleccionada != null) {
            Incidencia seleccionada = si.getIncidenciaById(idSeleccionada);
            if (seleccionada != null) {
                if (seleccionada.getEstado().contains("espera")) {
                    seleccionada.setEstado("aprobada");
                    si.updateIncidencia(seleccionada);
                }
            }
            updateTable(strFilterGestor, "gestor");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona una incidencia antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_darDeAltaActionPerformed

    private void detallesIncidenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detallesIncidenciaActionPerformed
        detallesIncidencia();
    }//GEN-LAST:event_detallesIncidenciaActionPerformed

    private void detallesIncidencia() {
        if (idSeleccionada != null) {
            Incidencia seleccionada = si.getIncidenciaById(idSeleccionada);
            String dispositivo = "";
            String espacio = "";
            String tecnico = "";
            String gestor = "";
            String usuario = "";
            if (seleccionada.getDispositivo() != null) {
                dispositivo = seleccionada.getDispositivo().getMarca() + " " + seleccionada.getDispositivo().getModelo();
            }
            if (seleccionada.getEspacio() != null) {
                espacio = seleccionada.getEspacio().getDescripcion();
            }
            if (seleccionada.getTecnico() != null) {
                tecnico = seleccionada.getTecnico().getNombreApellidos();
            }
            if (seleccionada.getGestor() != null) {
                gestor = seleccionada.getGestor().getNombreApellidos();
            }
            if (seleccionada.getUsuario() != null) {
                usuario = seleccionada.getUsuario().getNombreApellidos();
            }
            JOptionPane.showMessageDialog(
                    null,
                    "ID: " + seleccionada.getId()
                    + "\nEstado: " + seleccionada.getEstado()
                    + "\nTipo: " + seleccionada.getTipo()
                    + "\nDescripci√≥n Incidencia: " + seleccionada.getDescIncidencia()
                    + "\nFecha de Entrada: " + seleccionada.getfEntrada()
                    + "\nFecha de Cierre: " + seleccionada.getfCierre()
                    + "\nDescripci√≥n Soluci√≥n: " + seleccionada.getDescSolucion()
                    + "\nDispositivo: " + dispositivo
                    + "\nEspacio: " + espacio
                    + "\nT√©cnico: " + tecnico
                    + "\nGestor: " + gestor
                    + "\nUsuario: " + usuario,
                    "Detalles de incidencia",
                    JOptionPane.INFORMATION_MESSAGE
            );
            updateTable(strFilterGestor, "gestor");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona una incidencia antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }


    private void incidenciasPorTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incidenciasPorTipoActionPerformed
        if ((String) incidenciasTipoComboBox.getSelectedItem() != null) {
            strFilterIncidencias = "tipo";
            updateTable(strFilterIncidencias, "incidencias");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca un tipo",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_incidenciasPorTipoActionPerformed

    private void incidenciasPorUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incidenciasPorUsuarioActionPerformed
        if ((String) incidenciasUsuarioComboBox.getSelectedItem() != null) {
            strFilterIncidencias = "usuario";
            updateTable(strFilterIncidencias, "incidencias");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca un id v√°lido",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_incidenciasPorUsuarioActionPerformed

    private void incidenciasPorTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incidenciasPorTecnicoActionPerformed
        if ((String) incidenciasTecnicoComboBox.getSelectedItem() != null) {
            strFilterIncidencias = "tecnico";
            updateTable(strFilterIncidencias, "incidencias");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca un id v√°lido",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_incidenciasPorTecnicoActionPerformed

    private void incidenciasPorGestorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incidenciasPorGestorActionPerformed
        if ((String) incidenciasGestorComboBox.getSelectedItem() != null) {
            strFilterIncidencias = "gestor";
            updateTable(strFilterIncidencias, "incidencias");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca un id v√°lido",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_incidenciasPorGestorActionPerformed

    private void incidenciasPorFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incidenciasPorFechaActionPerformed
        if (!jFormattedTextField1.getText().isBlank() && !jFormattedTextField2.getText().isBlank()) {
            strFilterIncidencias = "porfecha";
            updateTable(strFilterIncidencias, "incidencias");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca las fechas entre las que cerraron las incidencias",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_incidenciasPorFechaActionPerformed

    private void incidenciasTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incidenciasTodasActionPerformed
        strFilterIncidencias = "todas";
        updateTable(strFilterIncidencias, "incidencias");
    }//GEN-LAST:event_incidenciasTodasActionPerformed

    private void usuariosTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuariosTodosActionPerformed
        strFilterUsuarios = "todos";
        updateTable(strFilterUsuarios, "usuario");
    }//GEN-LAST:event_usuariosTodosActionPerformed

    private void tablitaGestorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablitaGestorMousePressed
        JTable source = (JTable) evt.getSource();
        int fila = source.rowAtPoint(evt.getPoint());
        idSeleccionada = (Integer) source.getModel().getValueAt(fila, 0);
    }//GEN-LAST:event_tablitaGestorMousePressed

    private void tablitaIncidenciasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablitaIncidenciasMousePressed
        JTable source = (JTable) evt.getSource();
        int fila = source.rowAtPoint(evt.getPoint());
        idSeleccionada = (Integer) source.getModel().getValueAt(fila, 0);
    }//GEN-LAST:event_tablitaIncidenciasMousePressed

    private void tablitaUsuariosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablitaUsuariosMousePressed
        JTable source = (JTable) evt.getSource();
        int fila = source.rowAtPoint(evt.getPoint());
        idSeleccionada = (Integer) source.getModel().getValueAt(fila, 0);
    }//GEN-LAST:event_tablitaUsuariosMousePressed

    private void detallesIncidenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detallesIncidenciasActionPerformed
        detallesIncidencia();
    }//GEN-LAST:event_detallesIncidenciasActionPerformed

    private void usuariosDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuariosDetallesActionPerformed
        if (idSeleccionada != null) {
            Usuario seleccionado = su.getUsuarioById(idSeleccionada);
            if (seleccionado != null) {
                JOptionPane.showMessageDialog(
                        null,
                        "ID: " + seleccionado.getId()
                        + "\nNombre Login: " + seleccionado.getNombreLogin()
                        + "\nContrase√±a: " + seleccionado.getContrasena()
                        + "\nNombre y Apellidos: " + seleccionado.getNombreApellidos()
                        + "\nCorreo electr√≥nico: " + seleccionado.getCorreo()
                        + "\nN√∫mero de tel√©fono: " + seleccionado.getTelefono(),
                        "Detalles de usuario",
                        JOptionPane.INFORMATION_MESSAGE
                );
            }
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona un usuario antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_usuariosDetallesActionPerformed

    private void usuariosPorPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuariosPorPerfilActionPerformed
        if ((String) perfilComboBox.getSelectedItem() != null) {
            strFilterUsuarios = "porperfil";
            updateTable(strFilterUsuarios, "usuario");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, introduzca un tipo",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_usuariosPorPerfilActionPerformed

    private void crearUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearUsuarioActionPerformed
        new CreateUsuario(this, true, su).setVisible(true);
        updateTable(strFilterUsuarios, "usuario");
    }//GEN-LAST:event_crearUsuarioActionPerformed

    private void borrarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarUsuarioActionPerformed
        if (idSeleccionada != null) {
            su.deleteUsuario(idSeleccionada);
            JOptionPane.showMessageDialog(
                    null,
                    "Se ha borrado el usuario con ID: " + idSeleccionada,
                    "Usuario Borrado",
                    JOptionPane.INFORMATION_MESSAGE
            );
            updateTable(strFilterUsuarios, "usuario");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona un usuario antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }

    }//GEN-LAST:event_borrarUsuarioActionPerformed

    private void tablitaDispositivosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablitaDispositivosMousePressed
        JTable source = (JTable) evt.getSource();
        int fila = source.rowAtPoint(evt.getPoint());
        idSeleccionada = (Integer) source.getModel().getValueAt(fila, 0);
    }//GEN-LAST:event_tablitaDispositivosMousePressed

    private void dispositivosTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispositivosTodosActionPerformed
        updateTable("todos", "dispositivo");
    }//GEN-LAST:event_dispositivosTodosActionPerformed

    private void dispositivosDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispositivosDetallesActionPerformed
        if (idSeleccionada != null) {
            Dispositivo seleccionado = sd.getDispositivoById(idSeleccionada);
            if (seleccionado != null) {
                JOptionPane.showMessageDialog(
                        null,
                        "ID: " + seleccionado.getId()
                        + "\nTipo: " + seleccionado.getTipo()
                        + "\nMarca: " + seleccionado.getMarca()
                        + "\nModelo: " + seleccionado.getModelo()
                        + "\nDescripci√≥n: " + seleccionado.getDescripcion(),
                        "Detalles de dispositivo",
                        JOptionPane.INFORMATION_MESSAGE
                );
            }
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona un dispositivo antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_dispositivosDetallesActionPerformed

    private void crearDispositivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearDispositivoActionPerformed
        new CreateDispositivo(this, true, sd).setVisible(true);
        updateTable("todos", "dispositivo");
    }//GEN-LAST:event_crearDispositivoActionPerformed

    private void borrarDispositivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarDispositivoActionPerformed
        if (idSeleccionada != null) {
            sd.deleteDispositivo(idSeleccionada);
            JOptionPane.showMessageDialog(
                    null,
                    "Se ha borrado el dispositivo con ID: " + idSeleccionada,
                    "Usuario Borrado",
                    JOptionPane.INFORMATION_MESSAGE
            );
            updateTable("todos", "dispositivo");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona un dispositivo antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_borrarDispositivoActionPerformed

    private void tablitaEspaciosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablitaEspaciosMousePressed
        JTable source = (JTable) evt.getSource();
        int fila = source.rowAtPoint(evt.getPoint());
        idSeleccionada = (Integer) source.getModel().getValueAt(fila, 0);
    }//GEN-LAST:event_tablitaEspaciosMousePressed

    private void espaciosTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espaciosTodosActionPerformed
        updateTable("todos", "espacio");
    }//GEN-LAST:event_espaciosTodosActionPerformed

    private void espaciosDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espaciosDetallesActionPerformed
        if (idSeleccionada != null) {
            Espacio seleccionado = se.getEspacioById(idSeleccionada);
            if (seleccionado != null) {
                JOptionPane.showMessageDialog(
                        null,
                        "ID: " + seleccionado.getId()
                        + "\nDescripci√≥n: " + seleccionado.getDescripcion(),
                        "Detalles de espacio",
                        JOptionPane.INFORMATION_MESSAGE
                );
            }
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona un espacio antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_espaciosDetallesActionPerformed

    private void crearEspacioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearEspacioActionPerformed
        new CreateEspacio(this, true, se).setVisible(true);
        updateTable("todos", "espacio");
    }//GEN-LAST:event_crearEspacioActionPerformed

    private void borrarEspacioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarEspacioActionPerformed
        if (idSeleccionada != null) {
            se.deleteEspacio(idSeleccionada);
            JOptionPane.showMessageDialog(
                    null,
                    "Se ha borrado el espacio con ID: " + idSeleccionada,
                    "Usuario Borrado",
                    JOptionPane.INFORMATION_MESSAGE
            );
            updateTable("todos", "espacio");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona un espacio antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_borrarEspacioActionPerformed

    private void asignarGestorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignarGestorActionPerformed
        asignar(false);
    }//GEN-LAST:event_asignarGestorActionPerformed

    private void gestorIncidenciasTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gestorIncidenciasTodasActionPerformed
        strFilterGestor = "todas";
        updateTable(strFilterGestor, "gestor");
    }//GEN-LAST:event_gestorIncidenciasTodasActionPerformed

    private void borrarIncidenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarIncidenciaActionPerformed
        if (idSeleccionada != null) {
            si.deleteIncidencia(idSeleccionada);
            JOptionPane.showMessageDialog(
                    null,
                    "Se ha borrado la incidencia con ID: " + idSeleccionada,
                    "Usuario Borrado",
                    JOptionPane.INFORMATION_MESSAGE
            );
            updateTable(strFilterIncidencias, "incidencias");
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Por favor, selecciona una incidencia antes de pulsar el bot√≥n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_borrarIncidenciaActionPerformed

    private void crearIncidenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearIncidenciaActionPerformed
        new AdminCreateIncidencia(this, true, sd, se, su, si).setVisible(true);
        updateTable(strFilterIncidencias, "incidencias");
    }//GEN-LAST:event_crearIncidenciaActionPerformed

    private void updateTable(String filtro, String panel) {
        try {
            DefaultTableModel dtm;
            Object[] arr;
            DefaultTableCellRenderer dtcr;
            //Si la tabla es de gestor
            if (panel.equals("gestor") || panel.equals("incidencias")) {
                dtm = new DefaultTableModel(new Object[][]{}, new String[]{"ID", "Estado", "Desc."});
                List<Incidencia> incidencias = si.getAllIncidencias();
                dtcr = new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                        Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                        // Coger la id de la incidencia en la fila actual
                        String estado = incidencias.get(row).getEstado();

                        // Poner en negrita si se solicita reapertura
                        if (estado.contains("reapertura")) {
                            cell.setFont(cell.getFont().deriveFont(Font.BOLD));
                            // Poner en it√°lica si se est√° en espera
                        } else if (estado.contains("espera")) {
                            cell.setFont(cell.getFont().deriveFont(Font.ITALIC));
                        } else {
                            cell.setFont(cell.getFont().deriveFont(Font.PLAIN));
                        }
                        return cell;
                    }
                };
                LocalDate a, b, c;
                for (Incidencia incidencia : incidencias) {
                    if (panel.equals("gestor")) {
                        if (filtro.equals("todas")
                                || (filtro.equals("espera") && incidencia.getEstado().contains("espera"))
                                || (filtro.equals("tipo") && Objects.equals(incidencia.getTipo(), (String) tipoComboBox.getSelectedItem()))
                                || (filtro.equals("tecnico") && Objects.equals(incidencia.getTecnico().getId(), Integer.valueOf(((String) listTecnicoComboBox.getSelectedItem()).split(";")[0])))) {
                            arr = new Object[]{incidencia.getId(), incidencia.getEstado(), incidencia.getDescIncidencia()};
                            dtm.addRow(arr);
                        }
                        //Si la tabla es de incidencias
                    } else if (panel.equals("incidencias")) {
                        if (filtro.equals("todas")
                                || (filtro.equals("espera") && incidencia.getEstado().contains("espera")
                                || (filtro.equals("tipo") && Objects.equals(incidencia.getTipo(), (String) incidenciasTipoComboBox.getSelectedItem()))
                                || (filtro.equals("usuario") && Objects.equals(incidencia.getUsuario().getId(), Integer.valueOf(((String) incidenciasUsuarioComboBox.getSelectedItem()).split(";")[0])))
                                || (filtro.equals("tecnico") && Objects.equals(incidencia.getTecnico().getId(), Integer.valueOf(((String) incidenciasTecnicoComboBox.getSelectedItem()).split(";")[0])))
                                || (filtro.equals("gestor") && Objects.equals(incidencia.getGestor().getId(), Integer.valueOf(((String) incidenciasGestorComboBox.getSelectedItem()).split(";")[0]))))) {
                            arr = new Object[]{incidencia.getId(), incidencia.getEstado(), incidencia.getDescIncidencia()};
                            dtm.addRow(arr);
                        } else if (filtro.equals("porfecha") && !incidencia.getfCierre().isBlank()) {
                            if (jFormattedTextField1.getText().matches("\\d{4}-(1[0-2]|[1-9])-(3[01]|[12][0-9]|[1-9])$") && jFormattedTextField2.getText().matches("\\d{4}-(1[0-2]|[1-9])-(3[01]|[12][0-9]|[1-9])$")) {
                                a = LocalDate.parse(jFormattedTextField1.getText(), formatter);
                                b = LocalDate.parse(jFormattedTextField2.getText(), formatter);
                                c = LocalDate.parse(incidencia.getfCierre(), formatter);
                                if (c.isAfter(a) && c.isBefore(b)) {
                                    arr = new Object[]{incidencia.getId(), incidencia.getEstado(), incidencia.getDescIncidencia()};
                                    dtm.addRow(arr);
                                }
                            }
                        }
                    }
                }
                if (panel.equals("gestor")) {
                    tablitaGestor.setModel(dtm);
                    tablitaGestor.setDefaultRenderer(Object.class, dtcr);
                }
                if (panel.equals("incidencias")) {
                    tablitaIncidencias.setModel(dtm);
                    tablitaIncidencias.setDefaultRenderer(Object.class, dtcr);
                }
            }
            //Si la tabla es de Usuarios
            if (panel.equals("usuario")) {
                dtm = new DefaultTableModel(new Object[][]{}, new String[]{"ID", "Nombre y Apellidos", "Correo"});
                List<Usuario> usuarios = su.getAllUsuarios();
                boolean bper = false;
                for (Usuario usuario : usuarios) {
                    if (filtro.equals("porperfil")) {
                        for (Perfil perfil : usuario.getPerfiles()) {
                            if (perfil.getTipo().equalsIgnoreCase((String) perfilComboBox.getSelectedItem())) {
                                bper = true;
                            }
                        }
                    }
                    if (filtro.equals("todos") || bper) {
                        arr = new Object[]{usuario.getId(), usuario.getNombreApellidos(), usuario.getCorreo()};
                        dtm.addRow(arr);
                    }
                    bper = false;
                }
                tablitaUsuarios.setModel(dtm);
            }
            if (panel.equals("dispositivo")) {
                dtm = new DefaultTableModel(new Object[][]{}, new String[]{"ID", "Tipo", "Modelo"});
                List<Dispositivo> dispositivos = sd.getAllDispositivos();
                for (Dispositivo dispositivo : dispositivos) {
                    if (filtro.equals("todos")) {
                        arr = new Object[]{dispositivo.getId(), dispositivo.getTipo(), dispositivo.getModelo()};
                        dtm.addRow(arr);
                    }
                }
                tablitaDispositivos.setModel(dtm);
            }
            if (panel.equals("espacio")) {
                dtm = new DefaultTableModel(new Object[][]{}, new String[]{"ID", "Descripci√≥n"});
                List<Espacio> espacios = se.getAllEspacios();
                for (Espacio dispositivo : espacios) {
                    if (filtro.equals("todos")) {
                        arr = new Object[]{dispositivo.getId(), dispositivo.getDescripcion()};
                        dtm.addRow(arr);
                    }
                }
                tablitaEspacios.setModel(dtm);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Ha habido un error actualizando la tabla: \n" + Arrays.toString(e.getStackTrace()),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
            e.printStackTrace();
        }
    }

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-M-d");
    Integer idSeleccionada;
    String strFilterGestor = "todas";
    String strFilterIncidencias = "todas";
    String strFilterUsuarios = "todos";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton asignarGestor;
    private javax.swing.JButton asignarTecnico;
    private javax.swing.JButton borrarDispositivo;
    private javax.swing.JButton borrarEspacio;
    private javax.swing.JButton borrarIncidencia;
    private javax.swing.JButton borrarUsuario;
    private javax.swing.JButton crearDispositivo;
    private javax.swing.JButton crearEspacio;
    private javax.swing.JButton crearIncidencia;
    private javax.swing.JButton crearUsuario;
    private javax.swing.JButton darDeAlta;
    private javax.swing.JButton detallesIncidencia;
    private javax.swing.JButton detallesIncidencias;
    private javax.swing.JButton dispositivosDetalles;
    private javax.swing.JButton dispositivosTodos;
    private javax.swing.JButton espaciosDetalles;
    private javax.swing.JButton espaciosTodos;
    private javax.swing.JComboBox<String> gestorComboBox;
    private javax.swing.JButton gestorIncidenciasTodas;
    private javax.swing.JComboBox<String> incidenciasGestorComboBox;
    private javax.swing.JButton incidenciasPorFecha;
    private javax.swing.JButton incidenciasPorGestor;
    private javax.swing.JButton incidenciasPorTecnico;
    private javax.swing.JButton incidenciasPorTipo;
    private javax.swing.JButton incidenciasPorUsuario;
    private javax.swing.JComboBox<String> incidenciasTecnicoComboBox;
    private javax.swing.JComboBox<String> incidenciasTipoComboBox;
    private javax.swing.JButton incidenciasTodas;
    private javax.swing.JComboBox<String> incidenciasUsuarioComboBox;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JScrollPane jScrollPaneTablaGestor;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JComboBox<String> listTecnicoComboBox;
    private javax.swing.JButton listarEnEspera;
    private javax.swing.JButton listarPorTecnico;
    private javax.swing.JButton listarPorTipo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JPanel panelDispositivos;
    private javax.swing.JPanel panelEspacios;
    private javax.swing.JPanel panelGestor;
    private javax.swing.JPanel panelIncidencias;
    private javax.swing.JPanel panelUsuarios;
    private javax.swing.JComboBox<String> perfilComboBox;
    private javax.swing.JTable tablitaDispositivos;
    private javax.swing.JTable tablitaEspacios;
    private javax.swing.JTable tablitaGestor;
    private javax.swing.JTable tablitaIncidencias;
    private javax.swing.JTable tablitaUsuarios;
    private javax.swing.JComboBox<String> tecnicoComboBox;
    private javax.swing.JComboBox<String> tipoComboBox;
    private javax.swing.JButton usuariosDetalles;
    private javax.swing.JButton usuariosPorPerfil;
    private javax.swing.JButton usuariosTodos;
    // End of variables declaration//GEN-END:variables
}
